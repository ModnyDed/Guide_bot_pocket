from dotenv import load_dotenv
import os
import webbrowser
import telebot
import requests
import json
import datetime
from telebot import types
import sqlite3

# –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é city –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–º –º–µ—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ get_weather –∏ get_places
# –∏ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–∫–∏–¥—ã–≤–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏–∏

load_dotenv
API = os.getenv('dedd8faab24bf4b5adb455980850dc90')
bot = telebot.Telebot('7181902570:AAGkf7jrLqvhN-pJgvL6NGQr_vE3F1NYTg0')

@bot.message_handler(commands=['start'])
def start(message):
    file = open('./video.MP4', 'rb')
    bot.send_video(message.chat.id, file)
    # –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —á–∞—Ç–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üèñü§ò')
    bot.send_message(message.chat.id, '–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')



@bot.message_handler(content_types=['text'])
# def get_place(message):
#     global city
#     city = message.text.strip().lower()
#
#
#
#
#
#     bot.register_next_step_handler(message, get_weather)


def get_weather(message):
    # city = message.text.strip().lower()

    # url = f'https://ru.wikipedia.org/w/api.php?action=query&list=search&srsearch=–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏+–≤+{city}&format=json'
    #
    # response = requests.get(url)
    # data = response.json()
    #
    # # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    # attractions = [(index + 1, item['title']) for index, item in enumerate(data['query']['search'])]
    #
    # # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    # for attraction in attractions:
    #     bot.send_message(message.chat.id, f"{attraction[0]}. {attraction[1]}")
    #
    # # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É
    # bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ")
    # selected_attraction = message.text.strip().lower()
    # selected_attraction = int(selected_attraction)
    # selected_title = attractions[selected_attraction - 1][1]
    #
    # bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {selected_title}")

    city = message.text.strip().lower()

    url = f'https://ru.wikipedia.org/w/api.php?action=query&list=search&srsearch=–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏+–≤+{city}&format=json'

    response = requests.get(url)
    data = response.json()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    attractions = [(index + 1, item['title']) for index, item in enumerate(data['query']['search'])]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç
    attractions_message = "\n".join([f"{attraction[0]}. {attraction[1]}" for attraction in attractions])
    bot.send_message(message.chat.id, attractions_message)

    # –§–ª–∞–≥ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    state = "waiting_for_selection"

    @bot.message_handler(func=lambda message: state == "waiting_for_selection")
    def handle_selection(message):
        try:
            selected_attraction = int(message.text)
            selected_title = attractions[selected_attraction - 1][1]
            bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {selected_title}")

            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            state = "default"
        except:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")

    #
    # res = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API}&units=metric')
    # if res.status_code == 200:
    #     #data = json.loads(res.text)
    #
    #     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
    #     data = res.json()
    #
    #     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    #     current_date = datetime.datetime.now().date()
    #
    #     # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
    #     forecast_data = []
    #
    # # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    #     for item in data["list"]:
    #         # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –≤—Ä–µ–º–µ–Ω–∏
    #         forecast_date = datetime.datetime.strptime(item["dt_txt"], "%Y-%m-%d %H:%M:%S").date()
    #
    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–º –¥–Ω–µ–º –∏ –≤—Ä–µ–º—è 12:00:00
    #         if forecast_date > current_date and item["dt_txt"].endswith("12:00:00"):
    #             # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    #             temperature = item["main"]["temp"]
    #
    #             # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–æ–≥–æ–¥—ã
    #             weather_type = item["weather"][0]["main"]
    #
    #             # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
    #             forecast_data.append({
    #                 "date": forecast_date,
    #                 "temperature": temperature,
    #                 "weather_type": weather_type
    #             })
    #
    #
    #
    #     # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    #     if forecast_data:
    #         for data in forecast_data:
    #             if data["weather_type"] == 'Clouds':
    #                 emojy = '‚òÅÔ∏è'
    #             elif data["weather_type"] == 'Sunny' or data["weather_type"] == 'Clear':
    #                 emojy = '‚òÄÔ∏è'
    #             elif data["weather_type"] == 'Rain':
    #                 emojy = 'üåß'
    #             elif data["weather_type"] == 'Snow':
    #                 emojy = 'üå®'
    #             bot.reply_to(message,f"–ü–æ–≥–æ–¥–∞ –Ω–∞ {data["date"]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data["temperature"]} ¬∞C\n–¢–∏–ø –ø–æ–≥–æ–¥—ã: {data["weather_type"]}")
    #             bot.send_message(message.chat.id, emojy)
    #
    # else:
    #     bot.reply_to(message, '–ì–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ')
    #
    #
    #





bot.polling(none_stop=True)